	.title	PPU
	.list	MEB
	.enabl	LC, AMA
	
	.asect
	.=0

@include common.mac
@include ppu_header.mac

PPMain:	; clean upper PPU RAM (with screen plane 0)
	mov	#PpuEnd, R0
	mov	#177000-PpuEnd/2, R3
	clr	(R0)+
	sob	R3, .-2

	; timers
	bic	#^B0000001000000000, @#177054	; disable vsync in PPU
	bis	#^B0000000100000000, @#177054	; enable vsync in CPU
	bic	#^B0001111110000000, @#177716	; sound init (mixer off) 	
	call	TimerInit			; init pp timer

	; keyboard
	mov	#KeyboardInt,  @#300
	bis	#100, @#177700			; allow keyboard interrupts

	; can use interrupts now
	mtps	#0

	; test for new devices
	mov	#TestInt, @#4
	clr	R0
	tst	@#C_AY_PORT1
	mov	R0, NoAy
	clr	R0
	tst	@#C_MIDI_PORT
	mov	R0, NoMidi
	clr	R0
	tst	@#C_MOUSE_PORT
	mov	R0, NoMouse
	clr	@#4

        ; set 'PPU is ready'
	mov	#PpuComm/2, @#177010
	clr	@#177014


	; test keyboard
	mov	#177010, R4
	mov	#177014, R5	
10$:	mov	#KeyCurrent/2, (R4)
	mov	(R5), R0
20$:	cmp	R0, #000000
	beq	10$
	mov	R0, 20$+2
	mov	#C_SCRWID*8.+1+C_VADDR, (R4)
	call	PrintBinaryWord
	mov	#KeyCurrent/2, (R4)
	mov	(R5), R0
	mov	#C_SCRWID*8.+10.+C_VADDR, (R4)
	call	PrintOctalWord
	br	10$


; //////////////////////////////////////////////////////////////////////////////
; // Utils
; //////////////////////////////////////////////////////////////////////////////

NoAy:		.word	177777
NoMidi:		.word	177777
NoMouse:	.word	177777

; interrupt for testing AY/mouse/etc
TestInt:
	dec	R0
	rti


; clear vram plane 0
ClearPlane0:
	mov	#100000, R0
	mov	#177000-100000/2, R3
	clr	(R0)+
	sob	R3, .-2
	return


; pp timer ready wait
TimerInit:
	clr	@#177710
	tst	@#177714
	tst	@#177710
	bne	TimerInit
	return


; keyboard interrupt
KeyboardInt:
	mov	R0, -(SP)
	mov	R1, -(SP)
	mov	R2, -(SP)
	mov	R3, -(SP)
	mov	R4, -(SP)
	mov	R5, -(SP)
	mov	#177010, R4
	mov	#177014, R5
	mov	(R4), -(SP)			; save vaddr register 
	movb	@#177702, R0			; scancode (read it just once)
	mov	#KeyCurrent/2, (R4)		; set 'current' key
	mov	R0, (R5)
	bmi	50$
	; key pressed
	mov	#KeyAny/2, (R4)			; 'anykey' is also pressed
	inc	(R5)
	movb	KeysDownTable(R0), R0
	add	#KeyAny/2, R0
	mov	R0, (R4)
	inc	(R5)
	br	90$
50$:	; key released
	bic	#^B1111111111110000, R0
	mov	#4, R3
	sub	R3, R0
	asl	R0
	asl	R0
	add	#KeysUpTable, R0
60$:	movb	(R0)+, R1
	add	#KeyAny/2, R1
	mov	R1, (R4)
	clr	(R5)
	sob	R3, 60$
90$:	; exit interrupt
	mov	(SP)+, (R4)
	mov	(SP)+, R5
	mov	(SP)+, R4
	mov	(SP)+, R3
	mov	(SP)+, R2
	mov	(SP)+, R1
	mov	(SP)+, R0
	rti 

; key up scancodes table
	.macro	.mku0	A, B, C, D
	.byte	A-KeyAny/2, B-KeyAny/2, C-KeyAny/2, D-KeyAny/2
	.endm
KeysUpTable:
	.mku0	KeyStop,	KeyAny,		KeyAny,		KeyAny		; 0100
	.mku0 	KeyShift,	KeyAny,		KeyAny,		KeyAny		; 0101
	.mku0	KeyAp2,		KeyTab,		KeyAny,		KeyAny		; 0110
	.mku0	KeySemi,	KeyAny,		KeyAny,		KeyAny		; 0111
	.mku0	Key1,	 	KeyK1,		KeyAny,		KeyAny		; 1000
	.mku0	Key2,	 	KeyK2,		KeyIsp,		KeySbr		; 1001
	.mku0	Key3,		KeyK3,		KeyPom,		KeyUst		; 1010
	.mku0	Key4,		KeySpace,	KeyRight,	KeyEnter	; 1011
	.mku0	Key5,		KeyDown,	KeyUp,		KeyK4		; 1100
	.mku0	Key6,		KeyK5,		KeyAny,		KeyAny		; 1101
	.mku0	Key7, 		Key0,		KeyLeft,	KeyAny		; 1110
	.mku0	Key8,		Key9,		KeyAny,		KeyAny		; 1111

; keys down scancodes table
	.macro	.mkd0	A, B, C, D, E, F, G, H
	.byte	A-KeyAny/2, B-KeyAny/2, C-KeyAny/2, D-KeyAny/2, E-KeyAny/2, F-KeyAny/2, G-KeyAny/2, H-KeyAny/2
	.endm
KeysDownTable:
	;	0		1		2		3		4		5		6		7
	.mkd0	KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyStop,	KeyAny,		KeyAp2,		KeySemi		; 000
	.mkd0	KeyK1,		KeyK2,		KeyK3,		Key4,		KeyK4,		KeyK5,		Key7,		Key8		; 010
	.mkd0	KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyTab,		KeyAny		; 020
	.mkd0	Key1,		Key2,		Key3,		KeyAny,		Key5,		Key6,		KeyAny,		KeyAny		; 030
	.mkd0	KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny		; 040
	.mkd0	KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny		; 050
	.mkd0	KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny		; 060
	.mkd0	KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny		; 070
	.mkd0	KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyShift,	KeyAny,		KeyAny		; 100
	.mkd0	KeyAny,		KeyAny,		KeyAny,		KeySpace,	KeyAny,		KeyAny,		KeyLeft,	KeyAny		; 110
	.mkd0	KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny		; 120
	.mkd0	KeyAny,		KeyAny,		KeyAny,		KeyRight,	KeyDown,	KeyAny,		KeyAny,		KeyAny		; 130
	.mkd0	KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny		; 140
	.mkd0	KeyAny,		KeyIsp,		KeyUst,		KeyEnter,	KeyUp,		KeyAny,		KeyAny,		KeyAny		; 150
	.mkd0	KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny,		KeyAny		; 160
	.mkd0	KeyAny,		KeySbr,		KeyPom,		KeyAny,		KeyAny,		KeyAny,		Key0,		Key9		; 170


; //////////////////////////////////////////////////////////////////////////////
; // Graphics
; //////////////////////////////////////////////////////////////////////////////

; 4x5 numbers (aligned by 8 bytes)
SprNumbers45:
	.byte	7,5,5,5,7,0,0,0, 2,2,2,2,2,0,0,0
	.byte	7,4,7,1,7,0,0,0, 7,4,6,4,7,0,0,0
	.byte	5,5,7,4,4,0,0,0, 7,1,7,4,7,0,0,0
	.byte	7,1,7,5,7,0,0,0, 7,4,4,4,4,0,0,0
	.byte	7,5,7,5,7,0,0,0, 7,5,7,4,7,0,0,0
	; shifted by 4 bits
	.byte	160,120,120,120,160,0,0,0, 040,040,040,040,040,0,0,0
	.byte	160,100,160,020,160,0,0,0, 160,100,140,100,160,0,0,0
	.byte	120,120,160,100,100,0,0,0, 160,020,160,100,160,0,0,0
	.byte	160,020,160,120,160,0,0,0, 160,100,100,100,100,0,0,0
	.byte	160,120,160,120,160,0,0,0, 160,120,160,100,160,0,0,0

; prints R0 (binary), (R4) vaddr, R5 must be set either 177012 or 177014
PrintBinaryWord:
	mov	#C_SCRWID, R2
	mov	#8., R3
20$:	; first half of 8-pixels
	mov	#SprNumbers45, R1
	asl	R0
	bcc	30$
	add	#8., R1
30$:	.rept	4
	movb	(R1)+, (R5)
	add	R2, (R4)
	.endr
	movb	(R1)+, (R5)
	sub	#C_SCRWID*4, (R4)
	; second half - shifted sprites and BIS
	mov	#SprNumbers45+80., R1
	asl	R0
	bcc	40$
	add	#8., R1
40$:	.rept	4
	bisb	(R1)+, (R5)
	add	R2, (R4)
	.endr
	bisb	(R1)+, (R5)
	sub	#C_SCRWID*4-1, (R4)
	sob	R3, 20$
	return	
 
 ; prints R0 (octal), (R4) vaddr, R5 must be set either 177012 or 177014
 PrintOctalWord:
	mov	#C_SCRWID, R2
	mov	#3., R3
	; 1st bit
	clr	R1
	br	22$
20$:	; first half of 8-pixels
	clr	R1
	asl	R0
	rol	R1
	asl	R0
	rol	R1
22$:	asl	R0
	rol	R1	
	; get normal spr addr
	asl	R1
	asl	R1
	asl	R1
	add	#SprNumbers45, R1
	; put bits
	.rept	4
	movb	(R1)+, (R5)
	add	R2, (R4)
	.endr
	movb	(R1)+, (R5)
	sub	#C_SCRWID*4, (R4)
	; second half - shifted sprites and BIS
	clr	R1
	asl	R0
	rol	R1
	asl	R0
	rol	R1
	asl	R0
	rol	R1
	; get shifted spr adr
	asl	R1
	asl	R1
	asl	R1
	add	#SprNumbers45+80., R1
	; put bits
	.rept	4
	bisb	(R1)+, (R5)
	add	R2, (R4)
	.endr
	bisb	(R1)+, (R5)
	sub	#C_SCRWID*4-1, (R4)
	sob	R3, 20$
	return	 


; //////////////////////////////////////////////////////////////////////////////
; // The End
; //////////////////////////////////////////////////////////////////////////////

.even
PpuEnd:

	.end	Start
